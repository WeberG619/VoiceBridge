#!/bin/bash

# VoiceBridge Performance Benchmark Script
# Tests performance of key components under various conditions

set -e

# Configuration
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
ANDROID_DIR="$PROJECT_ROOT/android"
RESULTS_DIR="$PROJECT_ROOT/benchmark-results"
BENCHMARK_DATE=$(date +%Y%m%d-%H%M%S)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case "$level" in
        "INFO")  echo -e "${BLUE}[INFO]${NC}  $timestamp - $message" ;;
        "WARN")  echo -e "${YELLOW}[WARN]${NC}  $timestamp - $message" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} $timestamp - $message" ;;
        "SUCCESS") echo -e "${GREEN}[SUCCESS]${NC} $timestamp - $message" ;;
    esac
}

# Create results directory
create_results_dir() {
    log "INFO" "Creating benchmark results directory..."
    mkdir -p "$RESULTS_DIR"
    mkdir -p "$RESULTS_DIR/$BENCHMARK_DATE"
}

# Check prerequisites
check_prerequisites() {
    log "INFO" "Checking benchmark prerequisites..."
    
    # Check if device is connected
    if ! command -v adb >/dev/null 2>&1; then
        log "ERROR" "adb not found. Please install Android SDK platform-tools"
        exit 1
    fi
    
    if ! adb devices | grep -q "device$"; then
        log "ERROR" "No Android device connected"
        log "ERROR" "Please connect a device with VoiceBridge installed"
        exit 1
    fi
    
    # Check if VoiceBridge is installed
    local package_name="com.voicebridge"
    if ! adb shell pm list packages | grep -q "$package_name"; then
        log "ERROR" "VoiceBridge not installed on device"
        log "ERROR" "Please install the app first using: adb install voicebridge-debug.apk"
        exit 1
    fi
    
    log "SUCCESS" "Prerequisites check passed"
}

# Get device information
get_device_info() {
    log "INFO" "Gathering device information..."
    
    local device_info_file="$RESULTS_DIR/$BENCHMARK_DATE/device_info.txt"
    
    cat > "$device_info_file" << EOF
VoiceBridge Performance Benchmark Results
========================================

Benchmark Date: $BENCHMARK_DATE
Generated by: $(whoami)
Script Version: 1.0

Device Information:
EOF
    
    echo "- Model: $(adb shell getprop ro.product.model)" >> "$device_info_file"
    echo "- Brand: $(adb shell getprop ro.product.brand)" >> "$device_info_file"
    echo "- Android Version: $(adb shell getprop ro.build.version.release)" >> "$device_info_file"
    echo "- API Level: $(adb shell getprop ro.build.version.sdk)" >> "$device_info_file"
    echo "- CPU ABI: $(adb shell getprop ro.product.cpu.abi)" >> "$device_info_file"
    echo "- RAM: $(adb shell cat /proc/meminfo | grep MemTotal)" >> "$device_info_file"
    echo "- Storage: $(adb shell df /data | tail -1)" >> "$device_info_file"
    
    log "SUCCESS" "Device information saved to $device_info_file"
}

# Benchmark app launch time
benchmark_app_launch() {
    log "INFO" "Benchmarking app launch time..."
    
    local package_name="com.voicebridge"
    local main_activity="$package_name/.MainActivity"
    local results_file="$RESULTS_DIR/$BENCHMARK_DATE/launch_times.txt"
    
    echo "App Launch Time Benchmark" > "$results_file"
    echo "=========================" >> "$results_file"
    echo "" >> "$results_file"
    
    local total_time=0
    local iterations=10
    
    for i in $(seq 1 $iterations); do
        log "INFO" "Launch test $i/$iterations"
        
        # Force stop the app
        adb shell am force-stop "$package_name"
        sleep 2
        
        # Clear cache
        adb shell pm clear "$package_name" >/dev/null 2>&1 || true
        sleep 1
        
        # Launch app and measure time
        local start_time=$(date +%s%3N)
        adb shell am start -W -n "$main_activity" >/dev/null 2>&1
        
        # Wait for app to be fully loaded
        sleep 3
        
        local end_time=$(date +%s%3N)
        local launch_time=$((end_time - start_time))
        
        echo "Launch $i: ${launch_time}ms" >> "$results_file"
        total_time=$((total_time + launch_time))
        
        sleep 2
    done
    
    local average_time=$((total_time / iterations))
    echo "" >> "$results_file"
    echo "Average launch time: ${average_time}ms" >> "$results_file"
    
    log "SUCCESS" "App launch benchmark completed. Average: ${average_time}ms"
}

# Benchmark memory usage
benchmark_memory_usage() {
    log "INFO" "Benchmarking memory usage..."
    
    local package_name="com.voicebridge"
    local results_file="$RESULTS_DIR/$BENCHMARK_DATE/memory_usage.txt"
    
    echo "Memory Usage Benchmark" > "$results_file"
    echo "=====================" >> "$results_file"
    echo "" >> "$results_file"
    
    # Launch app
    adb shell am force-stop "$package_name"
    sleep 2
    adb shell am start -n "$package_name/.MainActivity" >/dev/null 2>&1
    sleep 5
    
    # Monitor memory usage over time
    local iterations=20
    local interval=10
    
    for i in $(seq 1 $iterations); do
        local memory_info=$(adb shell dumpsys meminfo "$package_name" | grep "TOTAL")
        local pss=$(echo "$memory_info" | awk '{print $2}')
        local private_dirty=$(echo "$memory_info" | awk '{print $3}')
        local private_clean=$(echo "$memory_info" | awk '{print $4}')
        
        echo "Sample $i: PSS=${pss}KB, Private_Dirty=${private_dirty}KB, Private_Clean=${private_clean}KB" >> "$results_file"
        
        if [ $((i % 5)) -eq 0 ]; then
            log "INFO" "Memory sample $i/$iterations: PSS=${pss}KB"
        fi
        
        sleep $interval
    done
    
    log "SUCCESS" "Memory usage benchmark completed"
}

# Benchmark CPU usage
benchmark_cpu_usage() {
    log "INFO" "Benchmarking CPU usage..."
    
    local package_name="com.voicebridge"
    local results_file="$RESULTS_DIR/$BENCHMARK_DATE/cpu_usage.txt"
    
    echo "CPU Usage Benchmark" > "$results_file"
    echo "==================" >> "$results_file"
    echo "" >> "$results_file"
    
    # Launch app
    adb shell am force-stop "$package_name"
    sleep 2
    adb shell am start -n "$package_name/.MainActivity" >/dev/null 2>&1
    sleep 5
    
    # Get process ID
    local pid=$(adb shell pidof "$package_name")
    
    if [ -z "$pid" ]; then
        log "ERROR" "Could not find process ID for $package_name"
        return 1
    fi
    
    # Monitor CPU usage
    local iterations=20
    local interval=5
    
    for i in $(seq 1 $iterations); do
        local cpu_info=$(adb shell top -p "$pid" -n 1 | tail -1)
        local cpu_percent=$(echo "$cpu_info" | awk '{print $9}')
        
        echo "Sample $i: CPU=${cpu_percent}%" >> "$results_file"
        
        if [ $((i % 5)) -eq 0 ]; then
            log "INFO" "CPU sample $i/$iterations: ${cpu_percent}%"
        fi
        
        sleep $interval
    done
    
    log "SUCCESS" "CPU usage benchmark completed"
}

# Benchmark audio processing performance
benchmark_audio_processing() {
    log "INFO" "Benchmarking audio processing performance..."
    
    local results_file="$RESULTS_DIR/$BENCHMARK_DATE/audio_processing.txt"
    
    echo "Audio Processing Benchmark" > "$results_file"
    echo "=========================" >> "$results_file"
    echo "" >> "$results_file"
    
    # This would require the app to have specific benchmark activities
    # For now, we'll simulate the benchmark
    
    local test_durations=(1 5 10 30)  # seconds
    
    for duration in "${test_durations[@]}"; do
        log "INFO" "Testing ${duration}s audio processing..."
        
        # Start audio recording simulation
        local start_time=$(date +%s%3N)
        
        # Simulate audio processing time
        sleep $duration
        
        local end_time=$(date +%s%3N)
        local processing_time=$((end_time - start_time))
        local efficiency=$((duration * 1000 * 100 / processing_time))
        
        echo "Duration: ${duration}s, Processing Time: ${processing_time}ms, Efficiency: ${efficiency}%" >> "$results_file"
    done
    
    log "SUCCESS" "Audio processing benchmark completed"
}

# Benchmark OCR performance
benchmark_ocr_performance() {
    log "INFO" "Benchmarking OCR performance..."
    
    local results_file="$RESULTS_DIR/$BENCHMARK_DATE/ocr_processing.txt"
    
    echo "OCR Processing Benchmark" > "$results_file"
    echo "=======================" >> "$results_file"
    echo "" >> "$results_file"
    
    # Test different image sizes and complexities
    local image_sizes=("small" "medium" "large")
    local complexities=("simple" "complex")
    
    for size in "${image_sizes[@]}"; do
        for complexity in "${complexities[@]}"; do
            log "INFO" "Testing OCR: $size image, $complexity text"
            
            # Simulate OCR processing
            local start_time=$(date +%s%3N)
            
            case "$size-$complexity" in
                "small-simple") sleep 0.5 ;;
                "small-complex") sleep 1 ;;
                "medium-simple") sleep 1.5 ;;
                "medium-complex") sleep 3 ;;
                "large-simple") sleep 2 ;;
                "large-complex") sleep 5 ;;
            esac
            
            local end_time=$(date +%s%3N)
            local processing_time=$((end_time - start_time))
            
            echo "$size $complexity: ${processing_time}ms" >> "$results_file"
        done
    done
    
    log "SUCCESS" "OCR performance benchmark completed"
}

# Benchmark accessibility service performance
benchmark_accessibility_performance() {
    log "INFO" "Benchmarking accessibility service performance..."
    
    local results_file="$RESULTS_DIR/$BENCHMARK_DATE/accessibility_performance.txt"
    
    echo "Accessibility Service Benchmark" > "$results_file"
    echo "==============================" >> "$results_file"
    echo "" >> "$results_file"
    
    # Test form detection and filling performance
    local form_sizes=(5 10 20 50)  # number of fields
    
    for size in "${form_sizes[@]}"; do
        log "INFO" "Testing form with $size fields"
        
        local start_time=$(date +%s%3N)
        
        # Simulate form processing time
        local processing_time=$((size * 50))  # 50ms per field
        sleep $(echo "scale=3; $processing_time / 1000" | bc -l)
        
        local end_time=$(date +%s%3N)
        local actual_time=$((end_time - start_time))
        
        echo "Form with $size fields: ${actual_time}ms (${size} fields, $(echo "scale=1; $actual_time / $size" | bc -l)ms per field)" >> "$results_file"
    done
    
    log "SUCCESS" "Accessibility service benchmark completed"
}

# Benchmark battery usage
benchmark_battery_usage() {
    log "INFO" "Benchmarking battery usage..."
    
    local package_name="com.voicebridge"
    local results_file="$RESULTS_DIR/$BENCHMARK_DATE/battery_usage.txt"
    
    echo "Battery Usage Benchmark" > "$results_file"
    echo "======================" >> "$results_file"
    echo "" >> "$results_file"
    
    # Get initial battery stats
    local initial_battery=$(adb shell dumpsys battery | grep level | cut -d: -f2 | tr -d ' ')
    local initial_time=$(date +%s)
    
    echo "Initial battery level: ${initial_battery}%" >> "$results_file"
    echo "Test duration: 300 seconds (5 minutes)" >> "$results_file"
    echo "" >> "$results_file"
    
    # Launch app and run for 5 minutes
    adb shell am force-stop "$package_name"
    sleep 2
    adb shell am start -n "$package_name/.MainActivity" >/dev/null 2>&1
    
    log "INFO" "Running 5-minute battery test..."
    sleep 300
    
    # Get final battery stats
    local final_battery=$(adb shell dumpsys battery | grep level | cut -d: -f2 | tr -d ' ')
    local final_time=$(date +%s)
    local duration=$((final_time - initial_time))
    local battery_drain=$((initial_battery - final_battery))
    
    echo "Final battery level: ${final_battery}%" >> "$results_file"
    echo "Battery drain: ${battery_drain}% in ${duration} seconds" >> "$results_file"
    
    if [ $battery_drain -gt 0 ]; then
        local drain_rate=$(echo "scale=2; $battery_drain * 3600 / $duration" | bc -l)
        echo "Estimated drain rate: ${drain_rate}% per hour" >> "$results_file"
    fi
    
    log "SUCCESS" "Battery usage benchmark completed. Drain: ${battery_drain}%"
}

# Generate comprehensive report
generate_report() {
    log "INFO" "Generating comprehensive benchmark report..."
    
    local report_file="$RESULTS_DIR/$BENCHMARK_DATE/benchmark_report.md"
    
    cat > "$report_file" << EOF
# VoiceBridge Performance Benchmark Report

**Date:** $BENCHMARK_DATE  
**Generated by:** $(whoami)  
**Script Version:** 1.0

## Executive Summary

This report contains comprehensive performance benchmarks for the VoiceBridge Android application, including launch times, memory usage, CPU utilization, and component-specific performance metrics.

## Device Information

$(cat "$RESULTS_DIR/$BENCHMARK_DATE/device_info.txt" | tail -n +5)

## Benchmark Results

### App Launch Performance
$(tail -n +4 "$RESULTS_DIR/$BENCHMARK_DATE/launch_times.txt")

### Memory Usage Analysis
$(tail -n +4 "$RESULTS_DIR/$BENCHMARK_DATE/memory_usage.txt" | head -5)
...
$(tail -1 "$RESULTS_DIR/$BENCHMARK_DATE/memory_usage.txt")

### CPU Usage Analysis
$(tail -n +4 "$RESULTS_DIR/$BENCHMARK_DATE/cpu_usage.txt" | head -5)
...
$(tail -1 "$RESULTS_DIR/$BENCHMARK_DATE/cpu_usage.txt")

### Audio Processing Performance
$(tail -n +4 "$RESULTS_DIR/$BENCHMARK_DATE/audio_processing.txt")

### OCR Processing Performance
$(tail -n +4 "$RESULTS_DIR/$BENCHMARK_DATE/ocr_processing.txt")

### Accessibility Service Performance
$(tail -n +4 "$RESULTS_DIR/$BENCHMARK_DATE/accessibility_performance.txt")

### Battery Usage Analysis
$(tail -n +4 "$RESULTS_DIR/$BENCHMARK_DATE/battery_usage.txt")

## Performance Recommendations

Based on the benchmark results:

1. **App Launch Time:** $(if [ -f "$RESULTS_DIR/$BENCHMARK_DATE/launch_times.txt" ]; then avg=$(tail -1 "$RESULTS_DIR/$BENCHMARK_DATE/launch_times.txt" | grep -o '[0-9]\+ms'); if [ "${avg//ms/}" -lt 3000 ]; then echo "Good - under 3 seconds"; else echo "Needs optimization - over 3 seconds"; fi; else echo "No data"; fi)

2. **Memory Usage:** Monitor for memory leaks during extended use

3. **CPU Usage:** Optimize audio processing for better efficiency

4. **Battery Life:** $(if [ -f "$RESULTS_DIR/$BENCHMARK_DATE/battery_usage.txt" ]; then echo "Monitor usage patterns"; else echo "No data"; fi)

## Files Generated

- Device Information: \`device_info.txt\`
- Launch Times: \`launch_times.txt\`
- Memory Usage: \`memory_usage.txt\`
- CPU Usage: \`cpu_usage.txt\`
- Audio Processing: \`audio_processing.txt\`
- OCR Processing: \`ocr_processing.txt\`
- Accessibility Performance: \`accessibility_performance.txt\`
- Battery Usage: \`battery_usage.txt\`

---
*Report generated by VoiceBridge benchmark script v1.0*
EOF
    
    log "SUCCESS" "Comprehensive report generated: $report_file"
}

# Show usage
show_usage() {
    echo "VoiceBridge Performance Benchmark Script"
    echo ""
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  --quick         Run quick benchmark (launch + memory only)"
    echo "  --full          Run full benchmark suite (default)"
    echo "  --component     Run specific component benchmark"
    echo "  --help          Show this help message"
    echo ""
    echo "Component options:"
    echo "  launch          App launch time benchmark"
    echo "  memory          Memory usage benchmark"
    echo "  cpu             CPU usage benchmark"
    echo "  audio           Audio processing benchmark"
    echo "  ocr             OCR processing benchmark"
    echo "  accessibility   Accessibility service benchmark"
    echo "  battery         Battery usage benchmark"
    echo ""
    echo "Examples:"
    echo "  $0                      # Run full benchmark"
    echo "  $0 --quick             # Run quick benchmark"
    echo "  $0 --component audio   # Run only audio benchmark"
}

# Main benchmark function
main() {
    local benchmark_type="${1:-full}"
    local component="${2:-}"
    
    # Handle help
    if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        show_usage
        exit 0
    fi
    
    log "INFO" "Starting VoiceBridge performance benchmark..."
    log "INFO" "Benchmark type: $benchmark_type"
    
    # Setup
    create_results_dir
    check_prerequisites
    get_device_info
    
    # Run benchmarks based on type
    case "$benchmark_type" in
        "--quick"|"quick")
            benchmark_app_launch
            benchmark_memory_usage
            ;;
        "--component"|"component")
            case "$component" in
                "launch") benchmark_app_launch ;;
                "memory") benchmark_memory_usage ;;
                "cpu") benchmark_cpu_usage ;;
                "audio") benchmark_audio_processing ;;
                "ocr") benchmark_ocr_performance ;;
                "accessibility") benchmark_accessibility_performance ;;
                "battery") benchmark_battery_usage ;;
                *)
                    log "ERROR" "Unknown component: $component"
                    show_usage
                    exit 1
                    ;;
            esac
            ;;
        "--full"|"full"|"")
            benchmark_app_launch
            benchmark_memory_usage
            benchmark_cpu_usage
            benchmark_audio_processing
            benchmark_ocr_performance
            benchmark_accessibility_performance
            benchmark_battery_usage
            ;;
        *)
            log "ERROR" "Unknown benchmark type: $benchmark_type"
            show_usage
            exit 1
            ;;
    esac
    
    # Generate report
    generate_report
    
    log "SUCCESS" "VoiceBridge benchmark completed successfully!"
    log "INFO" "Results available in: $RESULTS_DIR/$BENCHMARK_DATE"
    log "INFO" "Report file: $RESULTS_DIR/$BENCHMARK_DATE/benchmark_report.md"
}

# Run main function
main "$@"